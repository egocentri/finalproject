// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v4.25.7
// source: dispcalc.proto

package dispcalc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Запрос вычисления выражения
type ExpressionRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Expression    string                 `protobuf:"bytes,1,opt,name=expression,proto3" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpressionRequest) Reset() {
	*x = ExpressionRequest{}
	mi := &file_dispcalc_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionRequest) ProtoMessage() {}

func (x *ExpressionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionRequest.ProtoReflect.Descriptor instead.
func (*ExpressionRequest) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{0}
}

func (x *ExpressionRequest) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

// Ответ с результатом
type ExpressionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Result        string                 `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ExpressionResponse) Reset() {
	*x = ExpressionResponse{}
	mi := &file_dispcalc_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExpressionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpressionResponse) ProtoMessage() {}

func (x *ExpressionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpressionResponse.ProtoReflect.Descriptor instead.
func (*ExpressionResponse) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{1}
}

func (x *ExpressionResponse) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Пустой запрос на получение задачи
type Empty struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Empty) Reset() {
	*x = Empty{}
	mi := &file_dispcalc_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{2}
}

// Задача для агента
type Task struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Expression    string                 `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	OperationTime uint32                 `protobuf:"varint,3,opt,name=operation_time,json=operationTime,proto3" json:"operation_time,omitempty"` // ms
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Task) Reset() {
	*x = Task{}
	mi := &file_dispcalc_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{3}
}

func (x *Task) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetExpression() string {
	if x != nil {
		return x.Expression
	}
	return ""
}

func (x *Task) GetOperationTime() uint32 {
	if x != nil {
		return x.OperationTime
	}
	return 0
}

// Запрос-ответ для задачи
type TaskResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Task          *Task                  `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResponse) Reset() {
	*x = TaskResponse{}
	mi := &file_dispcalc_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResponse) ProtoMessage() {}

func (x *TaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResponse.ProtoReflect.Descriptor instead.
func (*TaskResponse) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{4}
}

func (x *TaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

// Запрос с результатом
type TaskResult struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Result        string                 `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TaskResult) Reset() {
	*x = TaskResult{}
	mi := &file_dispcalc_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskResult) ProtoMessage() {}

func (x *TaskResult) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskResult.ProtoReflect.Descriptor instead.
func (*TaskResult) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{5}
}

func (x *TaskResult) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskResult) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// Ответ-статус
type Ack struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Ok            bool                   `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Ack) Reset() {
	*x = Ack{}
	mi := &file_dispcalc_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Ack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ack) ProtoMessage() {}

func (x *Ack) ProtoReflect() protoreflect.Message {
	mi := &file_dispcalc_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ack.ProtoReflect.Descriptor instead.
func (*Ack) Descriptor() ([]byte, []int) {
	return file_dispcalc_proto_rawDescGZIP(), []int{6}
}

func (x *Ack) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

var File_dispcalc_proto protoreflect.FileDescriptor

const file_dispcalc_proto_rawDesc = "" +
	"\n" +
	"\x0edispcalc.proto\x12\bdispcalc\"3\n" +
	"\x11ExpressionRequest\x12\x1e\n" +
	"\n" +
	"expression\x18\x01 \x01(\tR\n" +
	"expression\",\n" +
	"\x12ExpressionResponse\x12\x16\n" +
	"\x06result\x18\x01 \x01(\tR\x06result\"\a\n" +
	"\x05Empty\"]\n" +
	"\x04Task\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x1e\n" +
	"\n" +
	"expression\x18\x02 \x01(\tR\n" +
	"expression\x12%\n" +
	"\x0eoperation_time\x18\x03 \x01(\rR\roperationTime\"2\n" +
	"\fTaskResponse\x12\"\n" +
	"\x04task\x18\x01 \x01(\v2\x0e.dispcalc.TaskR\x04task\"4\n" +
	"\n" +
	"TaskResult\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x16\n" +
	"\x06result\x18\x02 \x01(\tR\x06result\"\x15\n" +
	"\x03Ack\x12\x0e\n" +
	"\x02ok\x18\x01 \x01(\bR\x02ok2w\n" +
	"\n" +
	"Dispatcher\x122\n" +
	"\aGetTask\x12\x0f.dispcalc.Empty\x1a\x16.dispcalc.TaskResponse\x125\n" +
	"\x0ePostTaskResult\x12\x14.dispcalc.TaskResult\x1a\r.dispcalc.AckBCZAgithub.com/egocentri/finalproject/cmd/orchestrator/proto;dispcalcb\x06proto3"

var (
	file_dispcalc_proto_rawDescOnce sync.Once
	file_dispcalc_proto_rawDescData []byte
)

func file_dispcalc_proto_rawDescGZIP() []byte {
	file_dispcalc_proto_rawDescOnce.Do(func() {
		file_dispcalc_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_dispcalc_proto_rawDesc), len(file_dispcalc_proto_rawDesc)))
	})
	return file_dispcalc_proto_rawDescData
}

var file_dispcalc_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_dispcalc_proto_goTypes = []any{
	(*ExpressionRequest)(nil),  // 0: dispcalc.ExpressionRequest
	(*ExpressionResponse)(nil), // 1: dispcalc.ExpressionResponse
	(*Empty)(nil),              // 2: dispcalc.Empty
	(*Task)(nil),               // 3: dispcalc.Task
	(*TaskResponse)(nil),       // 4: dispcalc.TaskResponse
	(*TaskResult)(nil),         // 5: dispcalc.TaskResult
	(*Ack)(nil),                // 6: dispcalc.Ack
}
var file_dispcalc_proto_depIdxs = []int32{
	3, // 0: dispcalc.TaskResponse.task:type_name -> dispcalc.Task
	2, // 1: dispcalc.Dispatcher.GetTask:input_type -> dispcalc.Empty
	5, // 2: dispcalc.Dispatcher.PostTaskResult:input_type -> dispcalc.TaskResult
	4, // 3: dispcalc.Dispatcher.GetTask:output_type -> dispcalc.TaskResponse
	6, // 4: dispcalc.Dispatcher.PostTaskResult:output_type -> dispcalc.Ack
	3, // [3:5] is the sub-list for method output_type
	1, // [1:3] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_dispcalc_proto_init() }
func file_dispcalc_proto_init() {
	if File_dispcalc_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_dispcalc_proto_rawDesc), len(file_dispcalc_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dispcalc_proto_goTypes,
		DependencyIndexes: file_dispcalc_proto_depIdxs,
		MessageInfos:      file_dispcalc_proto_msgTypes,
	}.Build()
	File_dispcalc_proto = out.File
	file_dispcalc_proto_goTypes = nil
	file_dispcalc_proto_depIdxs = nil
}
